/*
**  src/Bomb.cpp
**  Bomberman
**
**  Created by Evan HERVE on 03/05/12.
**  Copyright (c) 2012 EPITECH. All rights reserved.
*/

#include "../inc/Bomb.hh"
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

Bombe::Bombe(int posX, int posY, int power)
  : _posX(posX), _posY(posY), _power(power)
{
  srand(time(NULL));
}

Bombe::~Bombe()
{}

void Bombe::initialize()
{
  this->model_ =  gdl::Model::load("./asserts/bombe.FBX");
}

void Bombe::update(gdl::GameClock const & GameClock, gdl::Input &Input)
{
  (void)Input;
  this->model_ .update(GameClock);
  this->_fire->explose(-1, 0, this->_posX, this->_posY, this->_power);
  this->_fire->explose(-1, 1, this->_posX, this->_posY, this->_power);
  this->_fire->explose(1, 0, this->_posX, this->_posY, this->_power);
  this->_fire->explose(1, 1, this->_posX, this->_posY, this->_power);

}

void Bombe::draw()
{
  std::vector<std::pair<Vector3f*, float> >::iterator it;
  int	i = 0;

  this->model_.play("Take 001");
  for (it = this->positions.begin() ; it != this->positions.end() ; )
    {
      this->positions[i].first->y += 1.0f;
      this->draw_object(this->positions[i].first);
    }
}

void Bombe::draw_object(Vector3f *position)
{
  gdl::Model::Begin();

  glPushMatrix();

  glTranslatef((int)(float)position->z + 0.50f, 0.0f, (int)(float)position->x + 0.50f);
  glRotatef(0.0f, 0.0f, 1.0f, 0.0f);
  this->model_.draw();

  glPopMatrix();

  gdl::Model::End();
}

std::vector<std::pair<Vector3f*, float> > Bombe::getposition_b() const
{
  return(this->positions);
}
