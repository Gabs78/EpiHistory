/*
**  src/Bomb.cpp
**  Bomberman
**
**  Created by Evan HERVE on 03/05/12.
**  Copyright (c) 2012 EPITECH. All rights reserved.
*/

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "../inc/Bomb.hh"

Bomb::Bomb(int posX, int posY, int power) : _posX(posX), _posY(posY), _power(power)
{
  srand(time(NULL));
}

void		Bomb::generateBonus(int res)
{
  if (res == 0)
    setPos(5, this->_posX, this->_posY);
  if (res == 1)
    setPos(6, this->_posX, this->_posY);
  if (res == 2)
    setPos(7, this->_posX, this->_posY);
  if (res == 3)
    setPos(8, this->_posX, this->_posY);

}

void		Bomb::doExplosion(map &map)
{
  int		tmp = 0;
  int		tmppower = 0;
  int		res;

  tmp = this->_posX;
  tmppower = this->power + 2;
  while (this->_posX > 0 && this->_posX <= 20 && map::map.getMyMap(this->_posX, this->_posY) && tmppower > 0)
    {
      this->_posX--;      
      afficher(_posX, _posY);
      if (map::getMyMap(this->_posX, this->_posY) == BOX)
	{
	  res = rand() % 2;
	  if (res == 1)
	    setPos(9, this->_posX, this->_posY);
	  else
	    {
	      res = rand % 4;
	      this->generateBonus(res);
	      tmppower = 0;
	    }
 	}
      else if (map::getMyMap(this->_posX, this->_posY) == PLAYER)
	{
	  setPos(9, this->_posX, this->_posY); // NON TERMINE , CHARACTER A DELETE
	  tmppower = 0;
	}
      tmppower--;
    }
  this->_posX = tmp;
  tmppower = this->power + 2;





  //
  tmp = this->_posX;
  tmppower = this->power + 2;
  while (this->_posX > 0 && this->_posX <= 20 && map::map.getMyMap(this->_posX, this->_posY) && tmppower > 0)
    {
      this->_posX++;      
      afficher(_posX, _posY);
 if (map::getMyMap(this->_posX, this->_posY) == BOX)
	{
	  res = rand() % 2;
	  if (res == 1)
	    setPos(9, this->_posX, this->_posY);
	  else
	    {
	      res = rand % 4;
	      this->generateBonus(res);
	    }
 	}
      tmppower--;
    }
  
   this->_posX = tmp;
  tmppower = this->power + 2;

  tmp = this->_posX;
  tmppower = this->power + 2;
  while (this->_posX > 0 && this->_posX <= 20 && map::map.getMyMap(this->_posX, this->_posY) && tmppower > 0)
    {
      this->_posY--;      
      afficher(_posX, _posY);
 if (map::getMyMap(this->_posX, this->_posY) == BOX)
	{
	  res = rand() % 2;
	  if (res == 1)
	    setPos(9, this->_posX, this->_posY);
	  else
	    {
	      res = rand % 4;
	      this->generateBonus(res);
	    }
 	}
      tmppower--;
    }
  this->_posX = tmp;
  tmppower = this->power + 2;

  tmp = this->_posX;
  tmppower = this->power + 2;
  while (this->_posX > 0 && this->_posX <= 20 && map::map.getMyMap(this->_posX, this->_posY) && tmppower > 0)
    {
      this->_posY++;      
      afficher(_posX, _posY);
 if (map::getMyMap(this->_posX, this->_posY) == BOX)
	{
	  res = rand() % 2;
	  if (res == 1)
	    setPos(9, this->_posX, this->_posY);
	  else
	    {
	      res = rand % 4;
	      this->generateBonus(res);
	    }
 	}
      tmppower--;
    }
  this->_posX = tmp;
  tmppower = this->power + 2;
}

// void	Bomb::explose(map &map, int i, int y, int posx, int posY, int power)
// {
//   if (power >= 0)
//     {
//       if (y == 1)
// 	{
	  
// 	  explose(map, i, y, posX + i, posY, power -1);
// 	}
//       if (y == 2)
// 	{
	  
// 	  explose(map, i, y, posX, posY + i, power -1);
// 	}
//     }
// }

Bomb::~Bomb() {}

Bomb::Bomb(const Bomb &other)
{

}

Bomb&		operator=(const Bonb &other)
{
  
}
