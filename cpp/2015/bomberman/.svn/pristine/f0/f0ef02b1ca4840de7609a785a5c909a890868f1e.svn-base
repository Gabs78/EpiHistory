#include "map.hh"

map::map::map(int length, int width, int nbPlayer): _length(length), _width(width), _nbPlayer(nbPlayer)
{
  int	i;

  if (((((this->_length - 2) * 2) + ((this->_width - 2) * 2) - 4) / this->_nbPlayer) < 11)
    {
      std::cout << "too many player for thid map" << std::endl;
    }
  else
    {
      this->_mymap = new int*[this->_width + 1];
      for(i = 0; i < this->_width; i++)
	this->_mymap[i] = new int[this->_length + 1];
      this->generateMap();
    }
}

map::map::~map()
{
  int i;

    for(i = 0; this->_mymap[i]; i++)
      delete[] this->_mymap[i];
  delete[] this->_mymap;
}

void	map::map::generateMap()
{
  int	i;
  int	y;
  int	x;
  int	space;

  for(i = 0; i < this->_width; i++)
    for(y = 0; y < this->_length; y++)
      {
	if (i == 0 || y == 0 || y == (this->_length - 1) || i == (this->_width - 1))
	  this->_mymap[i][y] = 3;
	else
	  this->_mymap[i][y] = 2;
      }
  space = (((this->_length - 2) * 2) + ((this->_width - 2) * 2) - 4) / this->_nbPlayer;
  x = space -1;
  for(i = 0; i < this->_width; i++)
    {
      for(y = 0; y < this->_length; y++)
	{
	  if ((i == 1 && y != 0) || (y == 1 && i != 0) || (y == (this->_length - 2) && i != 0) || (i == (this->_width - 2) && y != 0))
	     x++;
	  if (x == space)
	    {
	      this->_mymap[i][y] = 1;
	      x = 0;
	    }
	}
    }
}

void	map::map::affMap() const
{
  int	i;
  int	y;

  for(i = 0; this->_mymap[i]; i++)
    {
      for(y = 0; this->_mymap[i][y]; y++)
	{
	  std::cout << this->_mymap[i][y];
	}
      std::cout << std::endl;
    }
}
